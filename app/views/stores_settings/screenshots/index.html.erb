<% content_for :title, "App Screenshots" %>
<% content_for :page_icon, 'fa-camera-retro' %>

<% sizes_url = "https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Appendices/Properties.html#//apple_ref/doc/uid/TP40011225-CH26-SW2" %>
<%= panel_view title: "Upload your app screenshots", icon: "fa-picture-o",
                heading_text: publishing_changes do %>
  <%= form_for @app_stores_info.app_screenshots.build, url: stores_settings_screenshots_path, method: :post, html: { id: "app-screenshot-upload", class: "dropzone-box" } do |f| %>
      <div class="dz-default dz-message">
        <i class="fa fa-cloud-upload"></i>
        Drop files in here<br><span class="dz-text-small">or click to pick manually</span>
      </div>
      <div class="fallback">
        <%= f.file_field :image %>
        <%= f.submit "Save changes", class: "btn btn-lg btn-primary" %>
      </div>
  <% end %>
<% end %>

<!-- Javascript -->
<script>
  $(function() {
    var screenshotSizes = [[640, 920], [640, 960], [640, 1096], [640, 1136], [750, 1334], [1242, 2208], [768, 1004], [768, 1024], [1536, 2008], [1536, 2048]];
    var screenshotSizesStrs = screenshotSizes.map(String);
    Dropzone.autoDiscover = false;
    $("#app-screenshot-upload").dropzone({
      paramName: "screenshot[image]",
      maxFilesize: 3, // MB
      acceptedFiles: 'image/*',

      dictResponseError: "Can't upload file!",
      autoProcessQueue: true,
      addRemoveLinks: true,
      thumbnailWidth: 300,
      thumbnailHeight: 450,

      previewTemplate:
      '<div class="dz-preview dz-file-preview">' +
        '<div class="dz-details">' +
          '<div class="dz-filename">' +
            '<span data-dz-name></span>' +
          '</div>' +
          '<div class="dz-size">' +
            'File size: <span data-dz-size></span>' +
          '</div>' +
          '<div class="dz-thumbnail-wrapper">' +
            '<div class="dz-thumbnail">' +
              '<img data-dz-thumbnail>' +
              '<span class="dz-nopreview">No preview</span>' +
              '<div class="dz-success-mark">' +
                '<i class="fa fa-check-circle-o"></i>' +
              '</div>' +
              '<div class="dz-error-mark">' +
                '<i class="fa fa-times-circle-o"></i>' +
              '</div>' +
              '<div class="dz-error-message">' +
                '<span data-dz-errormessage></span>' +
              '</div>' +
            '</div>' +
          '</div>' +
        '</div>' +
        '<div class="progress progress-striped active">' +
          '<div class="progress-bar progress-bar-success" data-dz-uploadprogress>' +
          '</div>' +
        '</div>' +
      '</div>',

      init: function() {
        // Register for the thumbnail callback.
        // When the thumbnail is created the image dimensions are set.
        this.on("thumbnail", function(file) {
          if (!file.mockFile) {
            var sizeArrStr = [file.width, file.height].toString();
            if (screenshotSizesStrs.indexOf(sizeArrStr) >= 0) {
              file.acceptDimensions();
            } else {
              file.rejectDimensions();
            }
          }
        });

        this.on("removedfile", function(file) {
          if (file.server_id) {
            $.ajax({
              url: '<%= stores_settings_screenshots_path %>' + '/' + file.server_id,
              type: 'DELETE',
              dataType: 'script',
              success: function(result) {
              }
            });
          }
        });

        this.on("success", function(file, response) {
          file.server_id = response.data.id;
        });

        var mockFiles = [];
        <% @app_stores_info.app_screenshots.all.each do |s| %>
          <% if s.image.exists? %>
            mockFiles.push({ name: "<%= s.image_file_name  %>",
                             size: <%= s.image_file_size %>,
                             type: "<%= s.image_content_type %>",
                             imageUrl: "<%= s.image.url(:thumb) %>",
                             accepted: true,
                             server_id: <%= s.id %>,
                             mockFile: true
                           });
          <% end %>
        <% end %>
        for (var i = 0; i < mockFiles.length; i++) {
          var mockFile = mockFiles[i];
          this.emit("addedfile", mockFile);
          this.emit("thumbnail", mockFile, mockFile.imageUrl);
          this.emit("uploadprogress", mockFile, 100, 1);
          this.files.push(mockFile);
        }
      },

      // Instead of directly accepting / rejecting the file, setup two
      // functions on the file that can be called later to accept / reject
      // the file.
      accept: function(file, done) {
        if (file.mockFile) {
          done();
        } else {
          file.acceptDimensions = done;
          file.rejectDimensions = function() {
            done("Incorrect dimension. Please refer to size guide.");
          };
        }
        // Of course you could also just put the `done` function in the file
        // and call it either with or without error in the `thumbnail` event
        // callback, but I think that this is cleaner.
      }
    });
  });
</script>
<!-- / Javascript -->
<style>
  #app-screenshot-upload .dropzone-box {
    min-height: 300px;
  }
  #app-screenshot-upload .dz-preview {
    width: 222px;
  }
  #app-screenshot-upload .dz-thumbnail {
    width: 200px;
    height: 300px;
  }
  #app-screenshot-upload .dz-thumbnail > img {
    max-width: 200px;
    max-height: 300px;
  }
</style>
